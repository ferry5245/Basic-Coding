# -*- coding: utf-8 -*-
"""Materi 2 Pengelolaan dan Analisis Data .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n-5HxwHCxn9x_ow-QTAX80s_NU8xbmKv

# Selamat Datang di Materi 2 Pengelolaan dan Analisis Data menggunakan Python

## Tools yang akan digunakan

<img src="https://miro.medium.com/proxy/0*6ElaVC0Cf4OndZKi.png" width="70%">

goole colab, merupakan layanan cloud berbasis **SaaS** / Software as Service yang dapat digunakan oleh semua pengguna akun google untuk menjalankan program berbahasa Python / R secara online dengan format berbasis jupyter notebook sehingga membantu proses prototyping program, beberapa kelebihan google colab:
<ol type="a">
<li>Free to use *ada versi premium untuk region US</li>
<li>Dapat terhubung dengan google drive secara seamless</li>
<li>Dapat melakukan kode secara kolaboratif</li>
<li>Terdapat layanan penggunana GPU & TPU gratis</li>
<li>Cocok untuk anda yang memiliki perangkat berspesifikasi rendah</li>
</ol>

<img src="https://blogs.bmc.com/wp-content/uploads/2017/09/saas-vs-paas-vs-iaas-1024x953.png" width="50%">

## Mengenal Python

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1200px-Python-logo-notext.svg.png" width="25%">
<img src="https://gvanrossum.github.io/images/guido-headshot-2019.jpg" width="25%">

Python merupakan bahasa pemrograman tingkat tinggi berbasis interpreter yang dinamis dan diciptakan oleh Guido Van Rossum pada tahun 1980 an yang terinspirasi dari bahasa pemrograman ABC, python memiliki penulisan gaya penulisan yang indah dan mudah dibaca serta memiliki aturan penulisan yang tertuang pada PEP-8

## Materi yang akan dibahas

<ol type="a">
<li>Pengenalan Pandas</li>
<li>Series</li>
<li>DataFrames</li>
<li>Missing Data</li>
<li>GroupBy</li>
<li>Operation</li>
<li>Data Input dan Ouput</li>
</ol>

# Materi

### 1. Pengenalan Pandas

<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/ed/Pandas_logo.svg/1200px-Pandas_logo.svg.png" width="50%">

Pandas (Python Data Analysis Library)merupakan open source library berbasis  python yang biasa digunakan untuk mengubah, mengelola dan melakukan analisis data<br>pandas sendiri dapat membaca hampir seluruh jenis file data yang ada seperti:
<ol>
<li>csv</li>
<li>txt</li>
<li>sql</li>
<li>json</li>
<li>dan masih banyak lagi</li>
</ol>

bahkan, kita dapat membuat pandas untuk membaca data dari struktur data seperti list & dictionary, hal ini membuat pandas menjadi tools favorit untuk bagi data scientist yang basic nya menggunakan python<br>
"""

# Import library pandas dan numpy

"""#### Jawaban"""

# Import library pandas
import pandas as pd
import numpy as np
import random as rd

"""### 2. Series

hal pertama yang akan kita pelajari di pandas adalah tipe data Series, Series hampir sama dengan list, dia memiliki nomer index, dan dapat berisikan berbagai macam objek python didalamnya

#### 1.membuat list dan dictionary
"""

# membuat sebuah series labels, my_list, numpyArray , dan my_dict
labels = ['a','b','c']
my_list = [10,20,30]
numpyArray = np.array([10,20,30])
my_dict = {'a':10,'b':20,'c':30}

"""##### Jawaban"""

# membuat sebuah series labels, my_list, numpyArray , dan my_dict
labels = ['a','b','c']
my_list = [10,20,30]
numpyArray = np.array([10,20,30])
my_dict = {'a':10,'b':20,'c':30}

"""#### 2.Membuat Series dari list"""

# membuat series dari list
pd.Series(data=my_list)

"""
##### Jawaban
"""

# membuat series dari list
pd.Series(data=my_list)

"""#### 3.Membuat Series dari list dan menambahkan index"""

# membuat series dari list dan menambahkan index
pd.Series(data=my_list,index=labels)

"""##### Jawaban"""

# membuat series dari list dan menambahkan index
pd.Series(data=my_list,index=labels)

"""#### 4. Membuat Series dari array numpy"""

# Membuat series dari numpy array
pd.Series(data=numpyArray)

"""##### Jawaban"""

# Membuat series dari numpy array
pd.Series(numpyArray)

"""#### 5.Membuat Series dari dictionary python"""

# Membuat series dari dict python
pd.Series(my_dict)

"""##### Jawaban"""

# Membuat series dari dict python
pd.Series(my_dict)

"""#### 6. Membuat Series dengan berisikan object fungsi built-in Python"""

# Membuat series dengan berisikan fungsi python
pd.Series([print,len,np.nan])

"""##### Jawaban"""

# Membuat series dengan berisikan fungsi python
pd.Series([print,sum,len])

"""#### 7. Akses data melewati Index

buatlah sebuah Series yang dimana data = 250,450,200,150 dan index = USA,China,India dan Brazil kemudian simpan kedalam variable srs
"""

# membuat series dan simpan ke dalam srs
srs = pd.Series([250,450,200,150],index=['USA','China','India','Brazil'])
print(srs)

# tampilkan berapa nilai Brazil
srs['Brazil']

"""##### Jawaban"""

# membuat series dan simpan ke dalam srs
srs = pd.Series(data=[250,450,200,150],index = ['USA', 'China','India', 'Brazil'])

# tampilkan berapa nilai Brazil
srs['Brazil']

"""#### 8. Gabungkan 2 Series"""

data_Q1 = pd.Series(data=[250,450,200,150],index = ['USA', 'China','India', 'Brazil'])
data_Q2 = pd.Series([260,500,210,100],index = ['USA', 'China','India', 'Japan'])

#gabungkan data_Q1 dan data_Q2
data_Q1 + data_Q2

"""##### Jawaban"""

data_Q1 = pd.Series(data=[250,450,200,150],index = ['USA', 'China','India', 'Brazil'])
data_Q2 = pd.Series([260,500,210,100],index = ['USA', 'China','India', 'Japan'])

#gabungkan data_Q1 dan data_Q2
data_Q1 + data_Q2

"""### 3. DataFrame

DataFrame merupakan kumpulan dari beberapa Series, Dataframe dapat dianalogikan sebagai tabel excel yang dimana terdapat baris dan kolom

#### 1. Membuat DataFrame
"""

columns= ['W', 'X', 'Y', 'Z'] # 4 columns
index= ['A', 'B', 'C', 'D', 'E'] # 5 rows

np.random.seed(42)
data = randint(-100,100,(5,4))

data #print(data)

# Buatlah variable df (dataframe) dengan value = data, column = column, dan index = index
df =

"""##### Jawaban"""

# Buatlah variable df (dataframe) dengan value = data, column = column, dan index = index
df = pd.DataFrame(data,index,columns)

"""#### 2.Select dan Indexing"""

#tampilkan column W dari df saja

#tampilkan 2 column W dan Y

"""##### Jawaban"""

#tampilkan column W dari df saja
df['W']

#tampilkan column W dan Y
df[['W','Y']]

"""#### 3.Menambah Column (Series) di DataFrame"""

#buatlah column "new" dimana hasil dari W + Y

"""##### Jawaban"""

#buatlah column "new" dimana hasil dari W + Y
df['new'] = df['W'] + df['Y']

"""#### 4.Menghapus Column (Series) di Dataframe"""

#hapus column 'new' di dataframe

"""##### Jawaban"""

#hapus column 'new' di dataframe
df = df.drop('new',axis=1)

"""#### 5. Selection berdasarkan nama row"""

# ambil data yang berada di row A

"""##### Jawaban"""

# ambil data yang berada di row A
df.loc['A']

"""#### 6. Selection berdasarkan urutan row"""

# ambil data yang berada di index 0 row

# ambil data yang berada di index 0 sampai 2

"""##### Jawaban"""

# ambil data yang berada di index 0 row
df.iloc[0]

# ambil data yang berada di index 0 sampai 2
df.iloc[0:3]

"""#### 7. Menghilangkan data row berdasarkan nama"""

# menghapus data row 'C'

"""##### Jawaban"""

# Menghapus data row 'C'
df = df.drop('C',axis=0)

"""#### 8. Menggabungkan selection row dan column"""

# selection row A dan C pada kolom W dan Y

"""##### Jawaban"""

# selection row A dan C pada kolom W dan Y
df.loc[['A','C'],['W','Y']]

"""#### 9.Condisional Selection"""

df > 0

df[df > 0]

df['X']>0

df[df['X']>0]

df[df['X']>0]['Y']

df[df['X']>0][['Y','Z']]

df[(df['W']>0) & (df['Y'] > 1)]

"""#### 10. Advance dalam Indexing"""

df

# Reset ke default 0,1...n index

kota = 'BGR JKT BDG MLG BLI'.split()

# tambah colum state di df
df['States'] =

"""##### Jawaban"""

# Reset to default 0,1...n index
df.reset_index()

kota = 'BGR JKT BDG MLG BLI'.split()

# tambah colum state di df
df['States'] = kota

"""#### Informasi DataFrame"""

df.describe()

df.info()

df.dtypes

"""### 3.Missing Data

kita perlu mempelajari bagaimana menangani data yang tidak valid karena data hilang

#### 1. Hilangkan row/column yang memiliki data kosong
"""

df = pd.DataFrame({'A':[1,2,np.nan,4],
                  'B':[5,np.nan,np.nan,8],
                  'C':[10,20,30,40]})
df

# hilangkan data yang tidak valid

"""##### Jawaban"""

# hilangkan data yang tidak valid
df.dropna()

"""#### 2.Mengisi row/column yang memiliki data kosong"""

# mengisi data yg kosong dengan nilai 0

# mengisi data yg kosong dengan nilai 0 khusus untuk kolom A saja

# mengisi data yg kosong dengan nilai mean khusus untuk kolom A saja

"""##### Jawaban"""

# mengisi data yg kosong dengan nilai 0
df.fillna(value=0)

# mengisi data yg kosong dengan nilai 0 khusus untuk kolom A saja
df['A'].fillna(value=0)

# mengisi data yg kosong dengan nilai 0 khusus untuk kolom A saja
df['A'].fillna(value=df['A'].mean())

"""### 4. Groupby"""

df = pd.read_csv('https://raw.githubusercontent.com/TynClause/data-materi/master/Universities.csv')

df.groupby('Year')

df.groupby('Year').mean()

df.groupby('Year').mean().sort_index(ascending=False)

df.groupby('Year').describe().transpose()

"""Yang dapat dilakukan

<table><td><tt
><span
>count</span></tt></td><td>Number of non-null observations</td></tr><tr
><td><tt
><span
>sum</span></tt></td><td>Sum of values</td></tr><tr
><td><tt
><span
>mean</span></tt></td><td>Mean of values</td></tr><tr
><td><tt
><span
>mad</span></tt></td><td>Mean absolute deviation</td></tr><tr
><td><tt
><span
>median</span></tt></td><td>Arithmetic median of values</td></tr><tr
><td><tt
><span
>min</span></tt></td><td>Minimum</td></tr><tr
><td><tt
><span
>max</span></tt></td><td>Maximum</td></tr><tr
><td><tt
><span
>mode</span></tt></td><td>Mode</td></tr><tr
><td><tt
><span
>abs</span></tt></td><td>Absolute Value</td></tr><tr
><td><tt
><span
>prod</span></tt></td><td>Product of values</td></tr><tr
><td><tt
><span
>std</span></tt></td><td>Unbiased standard deviation</td></tr><tr
><td><tt
><span
>var</span></tt></td><td>Unbiased variance</td></tr><tr
><td><tt
><span
>sem</span></tt></td><td>Unbiased standard error of the mean</td></tr><tr
><td><tt
><span
>skew</span></tt></td><td>Unbiased skewness (3rd moment)</td></tr><tr
><td><tt
><span
>kurt</span></tt></td><td>Unbiased kurtosis (4th moment)</td></tr><tr
><td><tt
><span
>quantile</span></tt></td><td>Sample quantile (value at %)</td></tr><tr
><td><tt
><span
>cumsum</span></tt></td><td>Cumulative sum</td></tr><tr
><td><tt
><span
>cumprod</span></tt></td><td>Cumulative product</td></tr><tr
><td><tt
><span
>cummax</span></tt></td><td>Cumulative maximum</td></tr><tr
><td><tt
><span
>cummin</span></tt></td><td>Cumulative minimum</td></tr></tbody></table>

### 5.Operation

Operasi yang dimaksud adalah kita dapat memanipulasi data sesuai yang kita inginkan
"""

df_one = pd.DataFrame({'k1':['A','A','B','B','C','C'],
                      'col1':[100,200,300,300,400,500],
                      'col2':['NY','CA','WA','WA','AK','NV']})

df_one

"""1. Informasi nilai unique"""

df_one['col2'].unique()

df_one['col2'].value_counts()

df_one.drop_duplicates()

"""2. Fungsi dan aritmatika"""

df_one['New Col'] = df_one['col1'] * 10

def grab_first_letter(state):
    return state[0]

grab_first_letter('NY')

df_one['col2'].apply(grab_first_letter)

df_one['first letter'] = df_one['col2'].apply(grab_first_letter)

df_one['k1'].map({'A':1,'B':2,'C':3})

"""3. Mencari posisi index max dan min"""

df_one['col1'].max()

df_one['col1'].min()

df_one['col1'].idxmin()

df_one['col1'].idxmax()

"""4. Memperoleh informasi menganai dataframe"""

df_one.columns

df_one.columns = ['C1','C2','C3','C4','C5','C6']

df_one

df_one.index

"""5.Sorting nilai DataFrame"""

df_one.sort_values('C3')

"""6.Menggabung dataframe dengan dataframe"""

features = pd.DataFrame({'A':[100,200,300,400,500],
                        'B':[12,13,14,15,16]})
predictions = pd.DataFrame({'pred':[0,1,1,0,1]})

pd.concat([features,predictions],axis=1)

"""### Data Input dan Output

pada sesi ini kita akan melihat bagaimana kita memasukan data kita kedalam dataframe dalam berbagai format

https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html

<table border="1" class="colwidths-given docutils">
<colgroup>
<col width="12%" />
<col width="40%" />
<col width="24%" />
<col width="24%" />
</colgroup>
<thead valign="bottom">
<tr class="row-odd"><th class="head">Format Type</th>
<th class="head">Data Description</th>
<th class="head">Reader</th>
<th class="head">Writer</th>
</tr>
</thead>
<tbody valign="top">
<tr class="row-even"><td>text</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a></td>
<td><a class="reference internal" href="#io-read-csv-table"><span class="std std-ref">read_csv</span></a></td>
<td><a class="reference internal" href="#io-store-in-csv"><span class="std std-ref">to_csv</span></a></td>
</tr>
<tr class="row-odd"><td>text</td>
<td><a class="reference external" href="https://www.json.org/">JSON</a></td>
<td><a class="reference internal" href="#io-json-reader"><span class="std std-ref">read_json</span></a></td>
<td><a class="reference internal" href="#io-json-writer"><span class="std std-ref">to_json</span></a></td>
</tr>
<tr class="row-even"><td>text</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/HTML">HTML</a></td>
<td><a class="reference internal" href="#io-read-html"><span class="std std-ref">read_html</span></a></td>
<td><a class="reference internal" href="#io-html"><span class="std std-ref">to_html</span></a></td>
</tr>
<tr class="row-odd"><td>text</td>
<td>Local clipboard</td>
<td><a class="reference internal" href="#io-clipboard"><span class="std std-ref">read_clipboard</span></a></td>
<td><a class="reference internal" href="#io-clipboard"><span class="std std-ref">to_clipboard</span></a></td>
</tr>
<tr class="row-even"><td>binary</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/Microsoft_Excel">MS Excel</a></td>
<td><a class="reference internal" href="#io-excel-reader"><span class="std std-ref">read_excel</span></a></td>
<td><a class="reference internal" href="#io-excel-writer"><span class="std std-ref">to_excel</span></a></td>
</tr>
<tr class="row-odd"><td>binary</td>
<td><a class="reference external" href="http://www.opendocumentformat.org">OpenDocument</a></td>
<td><a class="reference internal" href="#io-ods"><span class="std std-ref">read_excel</span></a></td>
<td>&#160;</td>
</tr>
<tr class="row-even"><td>binary</td>
<td><a class="reference external" href="https://support.hdfgroup.org/HDF5/whatishdf5.html">HDF5 Format</a></td>
<td><a class="reference internal" href="#io-hdf5"><span class="std std-ref">read_hdf</span></a></td>
<td><a class="reference internal" href="#io-hdf5"><span class="std std-ref">to_hdf</span></a></td>
</tr>
<tr class="row-odd"><td>binary</td>
<td><a class="reference external" href="https://github.com/wesm/feather">Feather Format</a></td>
<td><a class="reference internal" href="#io-feather"><span class="std std-ref">read_feather</span></a></td>
<td><a class="reference internal" href="#io-feather"><span class="std std-ref">to_feather</span></a></td>
</tr>
<tr class="row-even"><td>binary</td>
<td><a class="reference external" href="https://parquet.apache.org/">Parquet Format</a></td>
<td><a class="reference internal" href="#io-parquet"><span class="std std-ref">read_parquet</span></a></td>
<td><a class="reference internal" href="#io-parquet"><span class="std std-ref">to_parquet</span></a></td>
</tr>
<tr class="row-odd"><td>binary</td>
<td><a class="reference external" href="https://msgpack.org/index.html">Msgpack</a></td>
<td><a class="reference internal" href="#io-msgpack"><span class="std std-ref">read_msgpack</span></a></td>
<td><a class="reference internal" href="#io-msgpack"><span class="std std-ref">to_msgpack</span></a></td>
</tr>
<tr class="row-even"><td>binary</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/Stata">Stata</a></td>
<td><a class="reference internal" href="#io-stata-reader"><span class="std std-ref">read_stata</span></a></td>
<td><a class="reference internal" href="#io-stata-writer"><span class="std std-ref">to_stata</span></a></td>
</tr>
<tr class="row-odd"><td>binary</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/SAS_(software)">SAS</a></td>
<td><a class="reference internal" href="#io-sas-reader"><span class="std std-ref">read_sas</span></a></td>
<td>&#160;</td>
</tr>
<tr class="row-even"><td>binary</td>
<td><a class="reference external" href="https://docs.python.org/3/library/pickle.html">Python Pickle Format</a></td>
<td><a class="reference internal" href="#io-pickle"><span class="std std-ref">read_pickle</span></a></td>
<td><a class="reference internal" href="#io-pickle"><span class="std std-ref">to_pickle</span></a></td>
</tr>
<tr class="row-odd"><td>SQL</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/SQL">SQL</a></td>
<td><a class="reference internal" href="#io-sql"><span class="std std-ref">read_sql</span></a></td>
<td><a class="reference internal" href="#io-sql"><span class="std std-ref">to_sql</span></a></td>
</tr>
<tr class="row-even"><td>SQL</td>
<td><a class="reference external" href="https://en.wikipedia.org/wiki/BigQuery">Google Big Query</a></td>
<td><a class="reference internal" href="#io-bigquery"><span class="std std-ref">read_gbq</span></a></td>
<td><a class="reference internal" href="#io-bigquery"><span class="std std-ref">to_gbq</span></a></td>
</tr>
</tbody>
</table>
"""

tables = pd.read_html('http://www.fdic.gov/bank/individual/failed/banklist.html')

df = pd.read_csv('https://raw.githubusercontent.com/TynClause/data-materi/master/Universities.csv')
